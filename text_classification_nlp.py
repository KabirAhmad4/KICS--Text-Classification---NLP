# -*- coding: utf-8 -*-
"""Text Classification- NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfvrKHzInpePndXQaTO8P06PSHGSc23k

Data Collection
"""

# Step 1: Clone the repository
!git clone https://github.com/KabirAhmad4/KICS--Text-Classification---NLP.git

"""Importing Libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.feature_extraction.text import CountVectorizer
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer


from sklearn.linear_model import LogisticRegression


from sklearn.metrics import accuracy_score
import sklearn.metrics as metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

"""Data Loading in Pandas df"""

df = pd.read_csv(r"/content/KICS--Text-Classification---NLP/dataset/train.csv")
df

"""View Data Information

"""

df.info()

# Display the number of rows and columns
data = df[:1000]
rows, columns = df.shape
print(f"Number of rows: {rows}")
print(f"Number of columns: {columns}")

docs = list(data['Comment'])
tfidf_vectorizer = TfidfVectorizer(use_idf=True, max_features = 20000)
tfidf_vectorizer_vectors = tfidf_vectorizer.fit_transform(docs)
docs = tfidf_vectorizer_vectors.toarray()

X = docs
y = data['Topic']
print(X.shape, y.shape)

"""Splitting data into train and test data to perform classification"""

SEED=123
X_train,X_test,y_train,y_test=train_test_split(X, y, test_size=0.2, random_state=SEED, stratify=y)
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y_train = label_encoder.fit_transform(y_train)
y_test = label_encoder.transform(y_test)

"""Labeling Data"""

def update(cat):
    if cat == "Biology":
        return 1
    elif cat == "Chemistry":
        return 0
    elif cat == "Physics" :
        return 2
    return cat
df.loc[:, "Topic"] = df["Topic"].apply(update)
df.head()

"""Applying Model  - Logistic Regression"""

lr = LogisticRegression(random_state=SEED)
lr.fit(X_train, y_train)

y_pred_train = lr.predict(X_train)
y_pred_test = lr.predict(X_test)
lr_accuracy = accuracy_score(y_test, y_pred_test)
print("\nTraining Accuracy score:",accuracy_score(y_train, y_pred_train))
print("Testing Accuracy score:",accuracy_score(y_test, y_pred_test))

"""Model Classification Report Results"""

print(classification_report(y_test, y_pred_test))

import matplotlib.pyplot as plt

classifiers = ['LR']
accuracies = [lr_accuracy]

plt.figure(figsize=(8, 5))
plt.bar(classifiers, accuracies, color='skyblue')
plt.xlabel('Classifiers')
plt.ylabel('Accuracy')
plt.title('Classifier Accuracies')
plt.ylim(0, 1)
plt.show()